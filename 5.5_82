Remove Duplicates from Sorted List II
 
Description:
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.
 
Example 1:
Input: 1->2->3->3->4->4->5
Output: 1->2->5
Example 2:
Input: 1->1->1->2->3
Output: 2->3


Implementation:
Note:
O(n) time complexity
O(1) space complexity
note  ListNode* p = dummy;
Code:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
#include <cstddef>
#include <iostream>
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head == NULL || head->next == NULL)
            return head;
        ListNode* dummy = new ListNode(0);
         dummy -> next = head;
         ListNode* p = dummy;
        while (p->next != NULL && p->next->next != NULL){
            if(p->next->val == p->next->next->val){
                int sameNum = p->next->val;
                while(p->next != NULL && p->next->val ==sameNum){
                    p->next = p->next->next;
                }
            }else{
                p = p->next;
            }
        }
        return dummy->next;
    }
};
