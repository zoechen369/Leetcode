Partition List
Description:
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.

Example:
Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

Solution:
Note:
two list: left and right

Implementation:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode *Left = new ListNode(0);
        ListNode *Right = new ListNode(0);
        ListNode *l = Left;
        ListNode *r = Right;
        
        for(ListNode *p = head; p; p = p->next)
            if(p->val < x)
            {
                l->next = p;//pointer
                l = p;//value
            }
        else{
            r->next = p;
            r = p;
        }
        l->next = Right->next;
        r->next = 0;
        
        return Left->next;
        
    }
};
